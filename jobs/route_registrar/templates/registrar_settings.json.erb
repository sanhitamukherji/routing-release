<%=
  require 'json'

  nats_ips = nil
  if_p('nats.machines') do |ips|
    nats_ips = ips.compact
  end.else do
    nats_ips = link('nats').instances.map { |instance| instance.address }
  end

  nats_port = nil
  if_p('nats.port') do |prop|
    nats_port = prop
  end.else do
    nats_port = link('nats').p("nats.port")
  end

  nats_user = nil
  if_p('nats.user') do |prop|
    nats_user = prop
  end.else do
    nats_user = link('nats').p("nats.user")
  end

  nats_password = nil
  if_p('nats.password') do |prop|
    nats_password = prop
  end.else do
    nats_password = link('nats').p("nats.password")
  end

  message_bus_servers = nats_ips.map do |ip|
    {
      host: "#{ip}:#{nats_port}",
      user: "#{nats_user}",
      password: "#{nats_password}"
    }
  end

  routes = p('route_registrar.routes')

  routes.each do |route|
    if route['prepend_instance_index']
      route['uris'].map! { |uri| "#{spec.index}-#{uri}" }
    end

    if route['external_port'].is_a?(Array)
      route['external_port'] = route['external_port'][spec.index]
      route['port'] = route['port'][spec.index]
    end
  end

  host = nil
  if_p('host') do |prop|
    host = prop
  end.else do
    host = spec.ip
  end

  routing_api = {
    ca_certs: '/var/vcap/jobs/route_registrar/config/certs/ca.crt'
  }
  if_p('route_registrar.routing_api.api_url') do |prop|
    routing_api['api_url'] = prop
  end
  if_p('route_registrar.routing_api.oauth_url') do |prop|
    routing_api['oauth_url'] = prop
  end
  if_p('route_registrar.routing_api.client_id') do |prop|
    routing_api['client_id'] = prop
  end
  if_p('route_registrar.routing_api.client_secret') do |prop|
    routing_api['client_secret'] = prop
  end
  if_p('route_registrar.routing_api.skip_cert_validation') do |prop|
    routing_api['skip_cert_validation'] = prop
  end

  config = {
    message_bus_servers: message_bus_servers,
    host: host,
    routes: routes,
    routing_api: routing_api,
  }
  JSON.pretty_generate(config)
%>
